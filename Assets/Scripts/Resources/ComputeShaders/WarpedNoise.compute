#pragma kernel Generate
#include "/Includes/Noise.compute"
#include "/Includes/Basics.compute"

//all the stuff under here will be set from DensityFunction.cs
float4 octaveOffsets[8];
float scale;
int octaves;
float persistance;
float lacunarity;
float baseAmplitude;
float floorHeight;
float floorStrength;
int numWarps;
float warpScales[3];
float4 warpOffsets1[3];
float4 warpOffsets2[3];
float4 warpOffsets3[3];

float noise(float3 p) {
    float frequency = 1;
    float amplitude = baseAmplitude;
    float noiseValue = 0;

    for (int i = 0; i < octaves; i++) {
        //generating the noise
        float3 samplePos = octaveOffsets[i].xyz + ((frequency * p) / scale);

        //getting the noise height of that part of the map
        noiseValue += snoise(samplePos) * amplitude;

        //dealing with octaves
        amplitude *= persistance;
        frequency *= lacunarity;
    }

    return noiseValue;
}

[numthreads(numThreadsX, numThreadsY, numThreadsZ)]
void Generate(uint3 id : SV_DispatchThreadID) {
    if (id.x >= sizeX || id.y >= sizeY || id.z >= sizeZ) {
        return;
    }

    float noiseValue = 0;
    float3 halfSize = float3((float)(sizeX - 1), (float)(sizeY - 1), (float)(sizeZ - 1)) / 2;

    float3 pos = (float3(id.x, id.y, id.z) - halfSize) * gridSize + center.xyz;

    float3 warpages[3];
    warpages[0] = float3(noise(pos + warpOffsets1[0].xyz), noise(pos + warpOffsets2[0].xyz), noise(pos + warpOffsets3[0].xyz));
    for (int i = 1; i < numWarps; i++){
        warpages[i] = float3(noise(pos + warpages[i - 1] * warpScales[i - 1] + warpOffsets1[i].xyz), noise(pos + warpages[i - 1] * warpScales[i - 1] + warpOffsets2[i].xyz), noise(pos + warpages[i - 1] * warpScales[i - 1] + warpOffsets3[i].xyz));
    }
    float value = - pos.y + noise(pos + warpages[numWarps - 1] * warpScales[numWarps - 1]);

    if (pos.y < floorHeight) {
        value += floorStrength;
    }

    points[indexFromCoord(id.x, id.y, id.z)] = float4(pos, value);
}
