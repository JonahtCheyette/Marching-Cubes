#include "/Includes/MarchTables.compute"
#include "/Includes/Basics.compute"
#pragma kernel Polygonize

struct Triangle {
    float3 v1;
    float3 v2;
    float3 v3;

    int2 edge1;
    int2 edge2;
    int2 edge3;

    float3 normal;
};

AppendStructuredBuffer<Triangle> triangles;
float isolevel;

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isolevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

[numthreads(numThreadsX, numThreadsY, numThreadsZ)]
void Polygonize(uint3 id : SV_DispatchThreadID) {
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= sizeX - 1 || id.y >= sizeY - 1 || id.z >= sizeZ - 1) {
        return;
    }

    int testIndex = 0;

    // 8 corners of the current cube
    int cubeCornerIndex[8] = {
        indexFromCoord(id.x, id.y, id.z),
        indexFromCoord(id.x + 1, id.y, id.z),
        indexFromCoord(id.x + 1, id.y, id.z + 1),
        indexFromCoord(id.x, id.y, id.z + 1),
        indexFromCoord(id.x, id.y + 1, id.z),
        indexFromCoord(id.x + 1, id.y + 1, id.z),
        indexFromCoord(id.x + 1, id.y + 1, id.z + 1),
        indexFromCoord(id.x, id.y + 1, id.z + 1)
    };

    float4 cubeCorners[8] = {
        points[cubeCornerIndex[0]],
        points[cubeCornerIndex[1]],
        points[cubeCornerIndex[2]],
        points[cubeCornerIndex[3]],
        points[cubeCornerIndex[4]],
        points[cubeCornerIndex[5]],
        points[cubeCornerIndex[6]],
        points[cubeCornerIndex[7]]
    };

    //Determine the index into the edge table which tells us which vertices are inside of the surface
    int cubeindex = 0;
    if (cubeCorners[0].w < isolevel) {
        cubeindex |= 1;
    }
    if (cubeCorners[1].w < isolevel) {
        cubeindex |= 2;
    }
    if (cubeCorners[2].w < isolevel) {
        cubeindex |= 4;
    }
    if (cubeCorners[3].w < isolevel) {
        cubeindex |= 8;
    }
    if (cubeCorners[4].w < isolevel) {
        cubeindex |= 16;
    }
    if (cubeCorners[5].w < isolevel) {
        cubeindex |= 32;
    }
    if (cubeCorners[6].w < isolevel) {
        cubeindex |= 64;
    }
    if (cubeCorners[7].w < isolevel) {
        cubeindex |= 128;
    }

    //Cube is entirely in/out of the surface
    if (cubeindex == 0 || cubeindex == 255) {
        return;
    }

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeindex][i] != -1; i += 3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int edge0 = triangulation[cubeindex][i];
        int edge1 = triangulation[cubeindex][i + 1];
        int edge2 = triangulation[cubeindex][i + 2];

        int a0 = cornerIndexAFromEdge[edge0];
        int b0 = cornerIndexBFromEdge[edge0];

        int a1 = cornerIndexAFromEdge[edge1];
        int b1 = cornerIndexBFromEdge[edge1];

        int a2 = cornerIndexAFromEdge[edge2];
        int b2 = cornerIndexBFromEdge[edge2];

        Triangle tri;
        //verts have to be declared in this order because unity's clockwise winding order
        tri.v3 = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.v2 = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.v1 = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);

        tri.edge3 = int2(cubeCornerIndex[a0], cubeCornerIndex[b0]);
        tri.edge2 = int2(cubeCornerIndex[a1], cubeCornerIndex[b1]);
        tri.edge1 = int2(cubeCornerIndex[a2], cubeCornerIndex[b2]);

        tri.normal = normalize(cross(tri.v2 - tri.v3, tri.v2 - tri.v1));
        triangles.Append(tri);
    }
}
